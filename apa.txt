import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image
import cv2

# Load the model using TensorFlow SavedModel format
model_path = "converted_savedmodel/model.savedmodel"  # Path to the SavedModel directory
loaded_model = tf.saved_model.load(model_path)

# Load labels
with open("converted_savedmodel/labels.txt", "r") as file:
    labels = file.read().split("\n")

# Streamlit application
st.title("Real-Time Mask Detection")
st.text("Click 'Start Camera' to use your webcam")

# Start and stop buttons
start_button = st.button("Start Camera")
stop_button = st.button("Stop Camera")

# Webcam feed and prediction display
if "camera_started" not in st.session_state:
    st.session_state["camera_started"] = False

if start_button:
    st.session_state["camera_started"] = True

if stop_button:
    st.session_state["camera_started"] = False

if st.session_state["camera_started"]:
    FRAME_WINDOW = st.image([])
    cap = cv2.VideoCapture(0)

    while st.session_state["camera_started"]:
        ret, frame = cap.read()
        if not ret:
            break

        # Resize frame to match model input size
        frame_resized = cv2.resize(frame, (224, 224))

        # Display the frame in the Streamlit app
        FRAME_WINDOW.image(frame_resized)

        # Preprocess the frame
        image = frame_resized.astype(np.float32) / 255.0
        image = np.expand_dims(image, axis=0)

        # Predict the class
        prediction = loaded_model(image)
        predicted_class = labels[np.argmax(prediction)]
        confidence = np.max(prediction) * 100

        # Show prediction and confidence
        st.write(f"Prediction: {predicted_class}")
        st.write(f"Confidence: {confidence:.2f}%")

    cap.release()
